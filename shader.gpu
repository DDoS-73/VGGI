// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;

uniform mat4 ModelViewProjectionMatrix, ModelViewInverseTranspose;
uniform vec3 CamPosition;

varying vec3 normalAdjusted;
varying vec3 camViewDir;

void main() {
    normalAdjusted = (ModelViewInverseTranspose * vec4(normalize(normal), 0.0)).xyz;
    camViewDir = normalize(CamPosition - vertex);
    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}`;

// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 normalAdjusted;
varying vec3 camViewDir;

float Ka=1.0;
float Kd=1.0;
float Ks=1.0;
float shininessVal = 1.0;
vec3 ambientColor = vec3(0.2, 0.1, 0.0);
vec3 diffuseColor = vec3(1.0, 1.0, 0.0);
vec3 specularColor = vec3(0.0, 0.0, 0.0);

uniform vec3 lightPosition;

void main() {
    vec3 N = normalize(normalAdjusted);
    vec3 L = normalize(lightPosition);
    vec3 reflectLighDir = normalize(reflect(L, N));
    vec3 ambient = Ka * ambientColor;
    vec3 diffuse = Kd * diffuseColor * max(0.0, dot(N, -L));
    vec3 specular = Ks * specularColor * pow(max(0.0, dot(camViewDir, reflectLighDir)), shininessVal);
    gl_FragColor = vec4(ambient + diffuse + specular, 1.0);
}`;

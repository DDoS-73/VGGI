

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix, NormalMatrix;
varying vec3 normalAdjusted;
varying vec3 vertPos;

void main() {
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vertPos = vec3(vertPos4) / vertPos4.w;
    normalAdjusted = vec3(NormalMatrix * vec4(normal, 0.0));
    gl_Position = vertPos4;
}`;

// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 normalAdjusted;
varying vec3 vertPos;

float Ka=1.0;
float Kd=1.0;
float Ks=1.0;
float shininessVal = 100.0;
vec3 ambientColor = vec3(0.2, 0.1, 0.0);
vec3 diffuseColor = vec3(1.0, 1.0, 0.0);
vec3 specularColor = vec3(0.0, 0.0, 0.0);

uniform vec3 lightPosition; // Light position

uniform vec4 color;

void main() {
    vec3 N = normalize(normalAdjusted);
    vec3 L = normalize(lightPosition - vertPos);
    float directionalLight = max(dot(N, L), 0.0);
    float specular = 0.5;
    if(directionalLight > 0.0) {
        vec3 R = reflect(-L, N);      // Reflected light vector
        vec3 V = normalize(-vertPos); // Vector to viewer
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, shininessVal);
    }
    gl_FragColor = vec4(Ka * ambientColor +
                        Kd * directionalLight * diffuseColor +
                        Ks * specular * specularColor, 1.0);
}`;
